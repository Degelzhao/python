datetime是Python处理日期和时间的标准库

1.获取当前日期和时间
>>>from datetime import datetime
>>>now = datetime.now()  #获取当前的datetime
>>>print(now)
2015-05-18 16:28:07.198690

datetime是模块，datetime模块还包含一个datetime类，通过from datetime import datetime导入的才是datetime这个类

2.获取指定日期和时间
>>>from datetime import datetime
>>>dt = datetime(2018,10,10,16,11)
>>>print(dt)

3.timestamp
在计算机中，时间实际上是用数字表示的。1970年1月1日 00:00:00 UTC+00:00时区的时刻称为epoch time，记为0，当前时间就是相对于epoch time的秒数，称为timestamp

timestamp的值与时区毫无关系，因为timestamp一旦确定，其UTC(世界统一时间)时间就确定了，转换到任意时区的时间也是完全确定的，这就是为什么计算机存储的当前时间是以timestamp表示的，因为全球各地的计算机在任意时刻的timestamp都是完全相同的

1>datetime转换为timestamp只需要简单调用timestamp():
>>>from datetime import datetime
>>>dt = datetime(2018,10,10,16,11)
>>>dt.timestamp()
1429417200.0

2>timestamp转换为datetime
使用datetime提供的fromtimestamp():
>>>from datetime import datetime
>>>t = 1429417200.0
>>>print(datetime.fromtimestamp())
2015-04-19 12:20:00
上述转换是在timestamp和本地时间做转换，本地时间是指当前操作系统设定的时区

timestamp也可以直接被转换到UTC标准时区的时间:
>>>from datetime import datetime
>>>t = 1539159060.0
>>>print(datetime.fromtimestamp(t))
2018-10-10 16:11:00
>>>print(datetime.utcfromtimestamp(t))
2018-10-10 08:11:00

4.str转换为datetime
转换方法是通过datetime.strptime()实现，需要一个日期和时间的格式化字符串:
>>>from datetime import datetime
>>>cday = datetime.strptime('2018-10-10 16:34:59','%Y-%m-%d %H:%M:%S')
>>>print(cday)
2018-10-10 16:34:59
字符串'%Y-%m-%d %H:%M:%S'规定了日期和时间部分的格式

5.datetime转换为str
通过strftime()进行转换，同样需要一个日期和时间的格式化字符串：
>>>from datetime import datetime
>>>now = datetime.now()
>>>print(now.strftime('%a, %b %d %H:%M'))

6.datetime加减
实际上就是把datetime往后或往前计算，得到新的datetime
直接用+ -运算符，需要导入timedelta类
>>>from datetime import datetime, timedelta
>>>now = datetime.now()
>>>now
datetime.datetime(2018, 10, 10, 16, 41, 32, 527963)
>>>now + timedelta(hours = 10)
datetime.datetime(2018, 10, 11, 2, 41, 32, 527963)
>>>now - timedelta(days = 1)
datetime.datetime(2018, 10, 9, 16, 41, 32, 527963)
>>>now + timedelta(days = 2,hours = 12)
datetime.datetime(2018, 10, 13, 4, 41, 32, 527963)

7.本地时间转换为UTC时间
本地时间是指系统设定时区的时间，例如北京时间是UTC+8:00时区的时间
而UTC时间指UTC+0:00时区的时间
datetime有个时区属性tzinfo,但是默认为None,所以无法区分这个datetime到底是哪个时区，可以强行给datetime设置一个时区
>>>from datetime import datetime, timedelta, timezone
>>>tz_utc_8 = timezone(timedelta(hours=8))
>>>now = datetime.now()
>>>now
datetime.datetime(2018, 10, 10, 16, 48, 36, 297264)
>>>dt = now.replace(tzinfo=tz_utc_8)
>>>dt
datetime.datetime(2018, 10, 10, 16, 48, 36, 297264, tzinfo=datetime.timezone(datetime.timedelta(0, 28800)))

8.时区转换
通过utcnow()拿到当前的UTC时间，再转换为任意时区的时间:

# 拿到UTC时间，并强制设置时区为UTC+0:00:
>>>utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)
>>>print(utc_dt)
2018-10-10 08:52:30.342400+00:00
>>>bj_dt = utc_dt.astimezone(timezone(timedelta(hours=8)))
>>>print(bj_dt)
2018-10-10 16:52:30.342400+08:00
>>>tokyo_dt = utc_dt.astimezone(timezone(timedelta(hours=9)))
>>>print(tokyo_dt)
2018-10-10 17:52:30.342400+09:00
>>>tokyo_dt2 = bj_dt.astimezone(timezone(timedelta(hours=9)))
>>>print(tokyo_dt2)
2018-10-10 17:52:30.342400+09:00

时区转换的关键:需要强制设置时区，作为基准时间
1>利用带时区的datetime
2>通过astimezone(),可以转换到任意时区