1.进程vs线程

多进程
优点:稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程
缺点:创建进程代价大，操作系统能同时运行的进程数量也是有限的

多线程
多线程模式通常比多进程快一点
缺点:任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存

在Windows下，多线程的效率比多进程高


2.线程切换
无论是多进程还是多线程，只要数量一多，效率肯定上不去
如果有很多个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态

所以，多任务一旦多到一个限度，就会消耗掉系统所有的资源，结果效率急剧下降，所有任务都做不好


3.计算密集型 vs IO密集型

是否采取多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和IO密集型

1>计算密集型
特点:要进行大量的计算，消耗CPU资源
计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低
所以，要最高效利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数

计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写

2>IO密集型
特点:CPU消耗很少，任务的大部分时间都在等待IO操作完成(因为IO的速度远远低于CPU和内存的速度),任务越多，CPU效率越高，但也要有个限度
常见的大部分任务都是IO密集型任务，比如Web应用

IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差

4.异步IO
如果一个任务在执行的过程中大部分时间都在等IO操作，单进程单线程模型会导致别的任务无法进行，因此才需要多进程或多线程来支持多任务并发进行
如果使用异步IO，就可以用单进程单线程来进行多任务

单线程的异步编程模型称为协程

对应到Python语言，有了协程的支持，就可以基于事件驱动编写高效的多任务程序




