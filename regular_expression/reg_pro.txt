正则表达式：是一种匹配字符串强有力的武器
设计思想:用一种描述性的语言来给字符串定义一个规则

所以我们判断一个字符串是否是合法的Email的方法是：

1.创建一个匹配Email的正则表达式；
2.用该正则表达式去匹配用户的输入来判断是否合法

在正则表达式中，如果直接给出字符，就是精确匹配
\d:可以匹配一个数字
\w:可以匹配一个字母或数字
\s:可以匹配一个空格(也包括Tab等空白符)
. :可以匹配任意字符
* :表示任意个字符(包括0个)
+ :表示至少一个字符
? :表示0个或1个字符
{n}:表示n个字符
{n,m}:表示n-m个字符

要做到更精确的匹配，可以用[]
[]:表示范围，例如:
[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线

A|B:可以匹配A或B,例如:
(P|p)ython可以匹配'Python'或者'python'

^:表示行的开头，所以^\d表示必须以数字开头

$:表示行的结束，所以\d$表示必须以数字结束

re模块:
Python提供re模块，包含所有正则表达式的功能

由于Python的字符串本身也用\转义，所以我们强烈建议使用Python的r前缀，就不用考虑转义的问题了,例如:
>>> import re
>>> re.match(r'^\d{3}\-\d{3,8}$', '010-12345')
<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
>>> re.match(r'^\d{3}\-\d{3,8}$', '010 12345')
>>>

切分字符串:
>>> re.split(r'\s+', 'a b   c')
['a', 'b', 'c']

>>> re.split(r'[\s\,]+', 'a,b, c  d')
['a', 'b', 'c', 'd']

分组:
除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）
>>> m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
>>> m.group(0)
'010-12345'
>>> m.group(1)
'010'
>>> m.group(2)
'12345'

group(0):原始字符串
group(1):第一个字串
group(2):第二个字串

贪婪匹配:
正则匹配默认是贪婪匹配,也就是匹配尽可能多的字符,例如:
>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')

加上?就可以让\d+采用非贪婪匹配:
>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
('1023', '00')

编译:
预编译正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：
>>> import re
# 编译:
>>> re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# 使用：
>>> re_telephone.match('010-12345').groups()
('010', '12345')
>>> re_telephone.match('010-8086').groups()
('010', '8086')

