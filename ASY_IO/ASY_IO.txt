异步IO:
CPU的速度远远快于磁盘，网络等IO。
同步IO:在一个线程中，遇到IO操作时，CPU往往需要等待IO操作完成后才能执行下一步操作
为了加快代码的运行速度，我们可以使用多进程或多线程来并发执行代码，解决一个线程被阻塞
而影响其他代码运行的问题

但是系统运行线程的数量也是有限的，而且当线程数量过多，CPU忙于切换线程而非执行代码，
运行效率大大降低
要解决这个问题，就要用到异步IO

异步IO:当代码需要执行一个IO操作时，只发出IO指令，让磁盘去执行，而CPU不等待IO结果，继续执行其他代码。
一段时间后，当IO返回结果时，再通知CPU进行处理。

在同步IO的情况下，遇到IO操作，主线程被挂起，阻塞了其他代码的运行
在异步IO的情况下，遇到IO操作，一个线程可以处理多个IO请求，大大提高系统的多任务处理能力

在Python中，通过生成器generator来实现协程

小结:
asyncio提供了完善的异步IO支持
异步操作需要在coroutine中通过yield from完成
把coroutine放到asyncio提供EventLoop引用中执行，即可实现异步操作
在Python3.5及之后的版本中，语法@asyncio.coroutine替换成async，语法yield from替换成await
异步IO更多用于服务器端，通过aiohttp模块，可以简单地编写出支持多用户高并发的服务器