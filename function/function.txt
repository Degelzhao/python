1.ord() :获取字符的整数表示
>>>ord('A')
65

2.chr() :把编码转换为对应的字符
>>>chr(66)
'B'

3.len() :计算str的字符数
>>>len('ABC')
3
>>>len('中文')
2

4.pow(x,y) :返回xy(x的y次方)

5.range(start,stop[,step]):可创建一个整数列表，一般用在for循环中
start :开始计数，默认是从0开始
stop:结束计数，不包括stop
step:步长，默认为1.例如：range（0， 5） 等价于 range(0, 5, 1)

6.isinstance(obj,type)
obj:要判断的对象
type:类型
如果obj的类型和type类型相同，则返回ture
反之，返回flase

7.iter():用来生成迭代器
>>>lst = [1, 2, 3]
>>> for i in iter(lst):
...     print(i)
... 
1
2
3

8.map(function,iterable):会根据提供的函数对指定序列做映射
参数:
function - 函数
iterable - 一个或多个序列
返回值:
返回迭代器

9.reduce(function,iterable):把一个函数作用在一个序列上，先对序列中的第1，2个元素进行操作，得到的结果再与第三个数据用function函数运算，最后得到一个结果
参数:
function - 函数，有两个参数
iterable - 可迭代对象

10.filter(function,iterable):用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。
参数:
function - 判断函数
iterable - 可迭代对象
返回值:
返回列表

11.sorted(iterable[,cmp[,key[,reverse]]])
用法:对所有可迭代对象进行临时排序操作
参数:
iterable - 可迭代对象
cmp - 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。
key - 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
reverse -  排序规则，reverse = True 降序 ， reverse = False 升序（默认）。

sort 与 sorted 区别：

sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。

list 的 sort 方法返回的是对已经存在的列表进行操作，无返回值，
而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。

12.lambda x: x * x :匿名函数
冒号前面的x表示函数参数

也可以把匿名函数作为返回值返回:
def build(x,y):
	return lambda: x * x + y * y

13.偏函数(Partial function)
假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：
def int2(x, base=2):
    return int(x, base)
>>> int2('1000000')
64
>>> int2('1010101')
85

functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2：
>>> import functools
>>> int2 = functools.partial(int, base=2)
>>> int2('1000000')
64
>>> int2('1010101')
85
所以，简单总结functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。

小结:
当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。

14.hasattr(object,name):用于判断对象是否包含对应的属性
参数:
object -- 对象
name -- 字符串，属性名
返回值:
如果对象有该属性返回True,否则返回False

15.setattr(object,name,value):对应函数getattr，用于设置属性，可以设置旧的属性，也可以设置新的属性
参数:
object -- 对象
name -- 字符串，对象属性
value -- 属性值
返回值:
无

16.getattr(object,name[,default]):用于返回对象的一个属性值
参数:
object -- 对象
name -- 字符串，对象属性
default -- 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError
返回值:
返回对象属性值


17.super(type[,object-or-type]):用于调用父类的一个方法
参数:
type -- 类
object-or-type -- 类，一般是self


18.strip([chars]):用于移除字符串头尾指定的字符(默认空格或换行符)或字符序列
参数:
chars -- 移除字符串头尾指定的字符序列
返回值:
返回移除字符串头尾指定的字符生成的新字符串
注意:
该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。

19.split():通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则仅分隔 num 个子字符串
语法:
str.split(str="", num=string.count(str))
参数:
str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等
num -- 分割次数
返回值:
返回分割后的字符串列表

20.title():所有单词的首字母转化为大写，其余字母均为小写
语法:
str.title();
参数:
N/A
返回值:
返回"标题化"的字符串

21.strip():用于移除字符串头尾指定的字符(默认空格或换行符)
语法:
str.strip([chars])
参数:
chars -- 移除字符串头尾指定的字符序列
返回值:
返回移除字符串头尾指定的字符生成的新字符串

22.lstrip():用于移除字符串左边的空格或指定字符
23.rstrip():用于移除字符串末尾的空格或指定字符

24.assert
用法:assert condition
用来让程序测试这个condition，如果condition为false，那么raise一个AssertionError出来。逻辑上等同于：
if not condition:
    raise AssertionError()

25.insert():用于将指定对象插入列表的指定位置
语法:
list.insert(index,obj)
参数:
index -- 对象obj需要插入的索引位置
obj -- 要插入列表中的对象
返回值:
无

25.encode():以encode指定的编码格式编码字符串。errors参数可以指定不同的错误处理方案。
语法:
str.encode(encoding = 'UTF-8',errors = 'strict')
参数:
encoding -- 要使用的编码，如'UTF-8'
errors -- 设置不同错误的处理方案

26.random.randint(1,100):在1-100中产生一个随机数，包括1和100

27.chr():用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符
语法:
chr(i)
参数:
i -- 可以是10进制也可以是16进制的形式的数字
返回值:
返回值是当前整数对应的ascii字符

28.join():用于将序列中的元素以指定的字符连接生成一个新的字符串
语法:
str.join(sequence)
参数:
sequence -- 要连接的元素序列
返回值:
返回通过指定字符连接序列中元素后生成的新字符串
实例:
>>>str = "-";
>>>seq = ("a", "b", "c") # 字符串序列
>>>print str.join( seq )
a - b - c

29.sort():用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数
语法:
list.sort(cmp = None, key = None, reverse = False)
参数:
cmp -- 可选参数，如果指定了该参数会使用该参数的方法进行排序
key --  主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序
reverse -- 排序规则，reverse = True 降序，reverse = False 升序

30.items():python字典items()函数以列表返回可遍历的(键，值)元组数组
语法:
dict.items()
参数:
N/A
返回值:
返回可遍历的(键，值)元组数组
例子:
dict = {'Google': 'www.google.com', 'Runoob': 'www.runoob.com', 'taobao': 'www.taobao.com'}
print "字典值 : %s" %  dict.items()

# 遍历字典列表
for key,values in  dict.items():
    print key,values
结果:
字典值 : [('Google', 'www.google.com'), ('taobao', 'www.taobao.com'), ('Runoob', 'www.runoob.com')]
Google www.google.com
taobao www.taobao.com
Runoob www.runoob.com

31.set():创建一个无序不重复元素集
语法:
class set([iterable])
返回值:
返回新的集合对象

32.update():把字典参数 dict2 的 key/value(键/值) 对更新到字典 dict 里
语法:
dict.update(dict2)
参数:
dict2 -- 添加到指定字典dict里的字典
返回值:
无








