1.Unicode:

Unicode把所有语言都统一到一套编码里，这样就不会有乱码问题

Unicode使用2个字节表示一个字符

如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCLL编码要多一倍的储存空间，在储存和传输上十分不划算

2.UTF-8:

UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。这样就能节省很多空间

3.Unicode 和 UTF-8之间使用的转化：

在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换成UTF-8编码

用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件中

Python使用Unicode编码

由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。

'ABC' :表示字符串，每个字符占8个字节
b'ABC' :表示bytes，每个字符占1个字节

要把bytes变为str :decode()

1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节：
>>>len(b'ABC')
3
>>>len('中文'.encode('utf-8'))
6

为了让Python解读器读取源代码时，按UTF-8编码读取，我们通常在文件开头写上这两行:
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

%d :整数
%f :浮点数
%s :字符串
%x :十六进制整数

format()
另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多：
>>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
'Hello, 小明, 成绩提升了 17.1%'

